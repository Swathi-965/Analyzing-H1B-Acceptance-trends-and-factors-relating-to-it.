# -*- coding: utf-8 -*-
"""baseline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ELj28VKxQe8E1h-VnIbU6HMb9ezVIUaB
""" 
import numpy as np 
from sklearn.metrics import roc_auc_score

class BaselineClasifier(): # Baseline classifier that predicts the class base on the mode of the labels.
    def __init__(self, np):
        self.central_tendency = None
        self.np = np
        
    def fit(self, data, y, central_t='mode'):
        # Count labels and find the most frequent one 
        label, counts = self.np.unique(y, return_counts=True) 
        if central_t == 'mode':
            self.central_tendency = label[counts.argmax()]
            
        elif central_t == 'mean':
            self.central_tendency = round(self.np.sum(y)/len(y))
        # Return an array with size equal to the data size  and each element setted to the mode.
        return self
    
    def predict(self, data):
        result = self.np.full(data.shape[0], self.central_tendency)
        return result

def run_clasifier(X_train, y_train, X_test, numpy, class_type='mode'):
    baseline_clasifier = BaselineClasifier(numpy)
    classifier = baseline_clasifier.fit(X_train, y_train, class_type)
    return baseline_clasifier.predict(X_test)

def compute_accuracy(validation, prediction):
    comp = prediction == validation 
    match_counts = np.count_nonzero(comp == True) 
    clasifier_accuracy = match_counts/len(validation)
    return clasifier_accuracy  

def compute_AUC(y, prediction):
    auc = None
    try:
        auc = roc_auc_score(y, prediction)
    except ValueError:
        pass
    return auc